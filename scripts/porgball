#!/bin/bash
#-----------------------------------------------------------------------
# porgball - binary package support for porg
#
# This file is part of the package porg
# Copyright (C) 2014 David Ricart
# For more information visit http://porg.sourceforge.net
#-----------------------------------------------------------------------

me=$(basename $0)

warn()			{ echo "$me: $*" >&2; }
die()			{ warn "$*"; exit 1; }
say()			{ [ "$opt_verb" ] && printf "$*"; }
do_version() 	{ porg --version | sed "s/^porg/$me/"; exit 0; }


do_help()
{
cat << EOF
$me - binary package support for porg.

Usage:
  $me [OPTIONS] [<packages>|<porgballs>]

General options:
  -t, --test           Test compressed file integrity
  -v, --verbose        Increase output messages
  -V, --version        Display version information
  -h, --help           Display this help message
  
Package creation options:
  -a, --all            Create a porgball for each logged package
  -d, --directory=DIR  Create the porgballs in DIR (default is '.')
  -g, --gzip           Compress with gzip (default)
  -b, --bzip2          Compress with bzip2
  -x, --xz             Compress with xz
  -<1..9>              Compression level (speed/quality balance)
      --fast           Like -1: Compress faster
      --best           Like -9: Compress better (default)
  -f, --force          Force overwrite of existing output files
  
Package extraction options:
  -e, --extract        Extract the porgballs given as arguments
  -d, --directory=DIR  Extract the files into root directory DIR
                       (default is '/')
  -l, --log            Log the extraction with porg

Note:
  Short options cannot be joined, for instance: '-af' is not correct,
  type '-a -f' instead.

EOF
	exit 0
}


# Defaults

opt_prog=gzip
opt_level=-9


do_check_dir()
{
	[ -d "$1" ] || die "$1: No such directory"
	[ -w "$1" ] || die "$1: Directory non writable"
}


do_extract()
{
	say "Processing $1\n"
		
	[ -e $1 ] || { warn "$1: No such file"; return 1; }

	case $1 in
		*.porg.tar.gz)	zprog=gzip;;
		*.porg.tar.bz2)	zprog=bzip2;;
		*.porg.tar.xz)	zprog=xz;;
		*)	warn "$1: Does not look like a porgball. Skipping"
			return 1
			;;
	esac

	[ "$opt_test" ] && { $zprog $opt_verb --test $1 || return 1; }

	$zprog $opt_verb $opt_force --keep --decompress $1 || return 1

	tarfile=$(expr $1 : '\(.*\.tar\)')
	files=$(tar -C $opt_dir -xvf $tarfile) || return 1
	rm -f $tarfile

	if [ "$opt_log" ]; then
		pkg=${1%.porg.tar.*}
		echo $files | awk '{ print "'"$opt_dir"'/" $0; }' \
		| porg $opt_verb -lp $pkg
		return $?
	fi
	
	return 0
}


do_create()
{
	say "Processing $1\n"

	: > $tmpfile

	for file in $(porg --no-package-name --files $1); do
		[ -f $file ] && echo $file >> $tmpfile
	done

	tarfile=$(echo $opt_dir/${1}.porg.tar | tr -s /)

	tar -cf $tarfile --files-from=$tmpfile || return 1

	$opt_prog $opt_level $opt_verb $opt_force $tarfile || return 1

	if [ "$opt_test" ]; then

		case $opt_prog in
			bzip2)	suf=bz2;;
			xz)		suf=xz;;
			*)		suf=gz;;
		esac

		$opt_prog $opt_verb -t ${tarfile}.$suf
		return $?
	fi

	return 0
}


# Parse the command line

while [ "$1" ]; do

	case $1 in

		-V|--version)	do_version;;
		-h|--help)		do_help;;
		-t|--test)		opt_test=-t;;
		-v|--verbose)	opt_verb=-v;;
		-a|--all)		opt_all=-a;;
		-g|--gzip)		opt_prog=gzip;;
		-b|--bzip2)		opt_prog=bzip2;;
		-x|--xz)		opt_prog=xz;;
		-[0-9])			opt_level=-${1:1};;
		--fast)			opt_level=-1;;
		--best)			opt_level=-9;;
		-f|--force)		opt_force=-f;;
		-e|--extract)	opt_extract=1;;
		-l|--log)		opt_log=1;;

		-d|-C|--directory|--dir|--root)
			[ "$2" ] && opt_dir=$2 || die "Option '$1' requires an argument"
			shift
			;;

		--directory=*|--dir=*|--root=*)
			opt_dir=${1#*=}
			[ "$opt_dir" ] || die "Option '$1' requires an argument"
			;;

		-*)	die "$1: Unrecognized option";;
		
		*)	args="$args $1";;

	esac
	shift
done


# Extraction of porgballs

if [ "$opt_extract" ]; then

	[ "$args" ] || die "No arguments provided"

	opt_dir=${opt_dir:-/}
	do_check_dir $opt_dir

	for ball in $args; do
		do_extract $ball
	done

# Creation of porgballs

else
	[ "$args" -o "$opt_all" ] || die "No arguments provided"

	opt_dir=${opt_dir:-.}
	do_check_dir $opt_dir

	tmpfile=$(mktemp || echo /tmp/$me.$$)
	# Remove tmp stuff on exit
	trap 'rm -f $tmpfile' 0

	for pkg in $(porg $opt_verb $opt_all $args); do
		do_create $pkg
	done
fi

exit 0

