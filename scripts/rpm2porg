#!/bin/bash
#----------------------------------------------------------------------
# rpm2porg - Build porg logs from a local rpm database.
#----------------------------------------------------------------------
# Copyright (C) 2004-2012 David Ricart
# For more information visit http://porg.sourceforge.net
#----------------------------------------------------------------------


#-----------#
# Functions #
#-----------#


help()
{
cat << EOF
$ME - Create porg logs from a local rpm(8) database.

Usage:
  $ME [OPTIONS] <packages>

Options:
  -a, --all            Create a log for each package in the rpm database.
  -q, --quiet          Be silent, except for errors.
  -f, --force          Force overwrite of already logged packages.
  -s, --strip-release  Remove the release suffix from the name of the
                       packages (e.g. foo-2.0.2-1 --> foo-2.0.1).
  -j, --sync-version   Remove obsolete versions of the packages from the porg
                       database.
  -v, --version        Display version information and exit.
  -h, --help           Display this help message and exit.

EOF
exit 0
}


version()
{
	porg --version | sed "s@^porg@$ME@"
	exit $?
}


say()
{
	[ $QUIET -eq 0 ] && printf "$*" >&2
}


die()
{
	echo -e "$ME: $*" >&2
	exit 1
}


sync_versions()
{
	local base=$(echo $1 | sed -e 's@-[0-9].*@@')
	for p in $(porg --expand $base); do
		if ! ( rpm --query $p &>/dev/null ); then
			porg --unlog --verbose $p
		fi
	done
}


#---------------------------------------#
# Initialize and parse the command line #
#---------------------------------------#


ME=rpm2porg
MYDIR=${PWD:-$(pwd)}

# Defaults
ALL_PKGS=0
STRIP=0
QUIET=0
FORCE=0
SYNC=0
INPUT_PKGS=

## Parse the command line arguments

while [ -n "$1" ]; do
	case $1 in
		-v|--version)				version;;
		-h|--help)					help;;
		-a|--all)					ALL_PKGS=1;;
		-q|--quiet)					QUIET=1;;
		-f|--force)					FORCE=1;;
		-j|--sync-version|--sync)	SYNC=1;;
		-s|--strip-release|--strip)	STRIP=1;;
		
		-*) die "Unrecognized option: $1\nTry '$ME --help' for more information"
			;;
		*)	INPUT_PKGS="$INPUT_PKGS $1"
			;;
	esac
	shift
done

## Check for rpm and porg programs

for prog in rpm porg; do
	$prog --version &>/dev/null || die "Cannot find $prog executable"
done


#---------------------------------#
# Get the list of packages to log #
#---------------------------------#

PKGLIST=
if [ $ALL_PKGS -eq 1 ]; then
	say "Building package list... "
	PKGLIST=$(rpm --query --all)
	say "done\n"
elif [ -z "$INPUT_PKGS" ]; then
	die "No input packages\nTry '$ME --help' for more information"
else
	for pkg in $INPUT_PKGS; do
		out=$(rpm --query $pkg) && PKGLIST="$PKGLIST $out" || echo $out >&2
	done
fi

[ -z "$PKGLIST" ] && exit 1

# Remove repeated packages from the list
PKGLIST=$(for pkg in $PKGLIST; do echo $pkg; done | sort --unique)


#-----------------#
# Create the logs #
#-----------------#

## Get the porg log directory

PORGRC=
for dir in / /usr/ /usr/local/; do
	if [ -s ${dir}etc/porgrc ]; then
		PORGRC=${dir}etc/porgrc
		break
	fi
done

if [ -z "$PORGRC" ]; then
	LOGDIR=/var/log/porg
else
	aux=$(grep '^LOGDIR=' $PORGRC | sed 's@.*=@@')
	[ -n "$aux" ] && LOGDIR=$(eval echo $aux | tr -s /)
fi
install -d $LOGDIR || exit 1

## Tmp dir to store intermediate files

TMPDIR=$(mktemp -dt ${me}XXXXXX 2>/dev/null || echo /tmp/$ME.$$)
install -d $TMPDIR || exit 1

# Remove tmp stuff on exit
trap 'rm -rf $TMPDIR; cd $MYDIR &>/dev/null' 0

## Process the packages

for pkg in $PKGLIST; do
	
	name=$pkg

	# Strip the release suffix, if needed.
	if [ $STRIP -eq 1 ]; then
		name=$(echo $pkg | awk '{ 						\
			out = $0;									\
			cnt = gsub(/-[0-9][^-]*/, "&");				\
			if (cnt > 1)  								\
				out = gensub(/-[0-9][^-]*/, "", cnt);	\
			print out;									\
		}')
	fi

	log=$LOGDIR/$name

	say "Processing package $name... "

	# Check whether it is already logged
	if [ $FORCE -eq 0 -a -e $log ]; then
		say "already logged\n"
		[ $SYNC -eq 1 ] && sync_versions $name
		continue
	fi

	# List of files

	install -d $TMPDIR/$name || exit 1
	cd $TMPDIR/$name || exit 1
		
	# Fake spec file
#XXX %{Icon}?
	rpm --query $pkg --queryformat="\
Name: %{Name}\n\
Version: %{Version}\n\
Summary: %{Summary}\n\
URL: %{URL}\n\
Author: %{Vendor}\n\
License: %{License}\n\n\
%%description\n%{description}\n" \
	> $name.spec || true
	
	# Log the package with porg

	for path in $(rpm --query --list $pkg | sort --reverse); do
		echo $path
	done \
		| porg --log --package=$name

	if [ ! -f $log ]; then
		say "no files (not logged)\n"
		continue
	fi

	# Fix installation date in the logs
	
	date=$(rpm --query $pkg --queryformat="%{InstallTime}")
	[ -n "$date" ] && sed -i "s|^#t:.*|#t:$date|" $log

	say "ok\n"

	[ $SYNC -eq 1 ] && sync_versions $name

done

exit 0

